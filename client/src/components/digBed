import { useState } from "react";
import { useMutation } from "@apollo/client";
import { gql } from "@apollo/client";

const CREATE_BED = gql`
  mutation CreateBed($width: Int!, $length: Int!) {
    createBed(width: $width, length: $length) {
      _id
      width
      length
      plants
    }
  }
`;

interface Bed {
  _id: string;
  width: number;
  length: number;
  plants: string[];
}

export default function DigBed() {
  const [width, setWidth] = useState<number>(0);
  const [length, setLength] = useState<number>(0);

  const [createBed, { data, loading, error }] = useMutation<{ createBed: Bed }>(
    CREATE_BED
  );

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createBed({ variables: { width, length } });
    } catch (err) {
      console.error("Error creating bed:", err);
    }
  };

  return (
    <div>
      <h2>Create a Bed</h2>
      <form onSubmit={handleSubmit}>
        <label>
          Width:
          <input
            type="number"
            value={width}
            onChange={(e) => setWidth(Number(e.target.value))}
          />
        </label>
        <br />
        <label>
          Length:
          <input
            type="number"
            value={length}
            onChange={(e) => setLength(Number(e.target.value))}
          />
        </label>
        <br />
        <button type="submit" disabled={loading}>
          {loading ? "Digging..." : "Dig Bed"}
        </button>
      </form>

      {error && <p style={{ color: "red" }}>Error: {error.message}</p>}
      {data && (
        <p>
          âœ… Bed created: {data.createBed.width} x {data.createBed.length}
        </p>
      )}
    </div>
  );
}